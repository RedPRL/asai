{0 Quick Start}

This tutorial is for an implementer to adopt this library as quickly as possible. We will assume you are already familiar with OCaml and are using a typical OCaml package structure.

{1 Define Error Codes}

The first step is to create a file [Logger.ml] with the following template:

{[
module Code =
struct
  (** All message codes used in your application. *)
  type t = (* ... *)

  (** The default severity of messages with a particular message code. *)
  let default_severity : t -> Asai.Diagnostic.severity =
    function
    | (* ... *) -> Bug
    | (* ... *) -> Error
    | (* ... *) -> Warning

  (** A short, concise, ideally Google-able string representation for each message code. *)
  let to_string =
    function
    | (* ... *) -> "E0001"
    | (* ... *) -> "E0002"
end

(** Include all the goodies from the asai library. *)
include Asai.Logger.Make(Code)
]}

The most important step is to decide the {i message codes}. It should be a meaningful classification of all the messages that could be sent to the end users. For example, [UndefinedSymbol] could be a reasonable code for a message about failing to find the definition of a symbol. Then, you will have to define two functions [default_severity] and [to_string]:

+ [default_severity]: {i Severity} means how serious an end user should take your message (is it an error or a warning?), and this can be overwritten when a message is issued. However, it seems messages with the same message code usually come with the same severity, so we require you to define a default severity value for each message code. You can then save some typing later on.
+ [to_string]: This function is to show the message code to the user. Ideally, this will be a short, Google-able string representation. Please do not use long descriptions such as "scope-error: undefined symbols". The library will give you plenty of opportunities to add detail to a message, but not here. The message code should be clearly unambiguous and easily recognizable.

Once you have filled out the template, run [dune build] or other tools to check that everything compiles. If so, you are ready for the next step.

{1 Start Using Logger}

Now, go to the places where you want to issue a message, be it a warning or an error. If you want to print a message and continue the execution, you can {{!val:Asai.Logger.S.emit}emit} a string:
{[
Logger.emit Greeting "hello!"
]}
where [Greeting] is the message code of this message. The fancier version is {{!val:Asai.Logger.S.emitf}emitf}, which formats a message like [printf]:
{[
Logger.emitf TypeError "@[<2>This term doesn't look right:@ %a@]" Syntax.pp term
]}
Note that you should not include any control characters (for example newlines [\n]) anywhere when using {{!val:Asai.Logger.S.emitf}emitf}. Use break hints (such as [@,] and [@ ]) and boxes instead. If you must, use forced newlines ([@\n]). See {!module:Stdlib.Format} for more information on boxes and break hints.

If you wish to terminate the execution after issuing a message instead of continuing the execution, use {{!val:Asai.Logger.S.fatal}fatal} instead of {{!val:Asai.Logger.S.emit}emit}. There's also a fancier {{!val:Asai.Logger.S.fatalf}fatalf} that works in the same way as {{!val:Asai.Logger.S.emitf}emitf}.

{1 Choose a Backend}

Now your program is generating lots of messages, and you have to choose a {i backend} to handle them. We will show how to display those messages in a terminal. Suppose your entry point module looks like this:
{[
let () = (* your application code *)
]}
You can use the {{!module:Asai.Tty}terminal} backend as follows:
{[
module Term = Asai.Tty.Make (Logger.Code)

let () =
  Logger.run ~emit:Term.display ~fatal:Term.display @@ fun () ->
  (* your application code *)
]}

{1 Add Backtraces}

Great messages come with meaningful backtraces. To add backtraces, you will have to "annotate" your code to generate meaningful backtraces. Suppose this is one of the functions whose invocation should be noted in user-facing backtraces:
{[
let f x y =
  (* very important code *)
]}
Add {{!val:Asai.Logger.S.trace}trace} to add a frame to the current backtrace:
{[
let f x y =
  Logger.trace "When calling f..." @@ fun () ->
  (* very important code *)
]}
Similar to {{!val:Asai.Logger.S.emitf}emitf}, there is also {{!val:Asai.Logger.S.tracef}tracef} which allows you to format messages:
{[
let f x y =
  Logger.tracef "When calling f on %d and %d..." x y @@ fun () ->
  (* very important code *)
]}

Note that, by default, the terminal backend will not show backtraces. You have to enable it as follows in your entry-point module:
{[
module Term = Asai.Tty.Make (Logger.Code)

let () =
  Logger.run ~emit:(Term.display ~show_backtrace:true) ~fatal:(Term.display ~show_backtrace:true) @@ fun () ->
  (* your application code *)
]}

{1 Add Location Information}

Lots of functions in your [Logger] is taking the optional argument [loc], including {{!val:Asai.Logger.S.trace}trace}. It is expecting an argument of type {!type:Asai.Span.t}. If you are using OCamllex, perhaps you will find {{!val:Asai.Span.of_lex}of_lex} handy. Please take a look at {!module:Asai.Span} to learn how to work with spans.
