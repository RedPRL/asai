module type S =
sig
  module Code : Diagnostic.Code

  (** {2 Constructing Diagnostics} *)

  (** [messagef ~loc ~additional_marks code format ...] constructs a diagnostic along with the backtrace frames recorded via [tracef]. *)
  val messagef : ?loc:Span.t -> ?additional_marks:Span.t list -> ?severity:Diagnostic.severity -> Code.t -> ('a, Format.formatter, unit, Code.t Diagnostic.t) format4 -> 'a

  (** [kmessagef kont ~loc ~additional_marks code format ...] constructs a diagnostic and then apply [kont] to the resulting diagnostic. *)
  val kmessagef : (Code.t Diagnostic.t -> 'b) -> ?loc:Span.t -> ?additional_marks:Span.t list -> ?severity:Diagnostic.severity -> Code.t -> ('a, Format.formatter, unit, 'b) format4 -> 'a

  (** {2 Sending Diagnostics} *)

  (** Emit a diagnostic and continue the computation. *)
  val emit : Code.t Diagnostic.t -> unit

  (** [emitf ~loc ~additional_marks code format ...] constructs and emits a diagnostic. *)
  val emitf : ?loc:Span.t -> ?additional_marks:Span.t list -> ?severity:Diagnostic.severity -> Code.t -> ('a, Format.formatter, unit, unit) format4 -> 'a

  (** Abort the computation with a diagnostic. *)
  val fatal: Code.t Diagnostic.t -> 'a

  (** [fatalf ~loc ~additional_marks code format ...] constructs a diagnostic and abort the current computation with the diagnostic. *)
  val fatalf : ?loc:Span.t -> ?additional_marks:Span.t list -> ?severity:Diagnostic.severity -> Code.t -> ('a, Format.formatter, unit, 'b) format4 -> 'a

  (** {2 Backtraces} *)

  (** [get_backtrace()] returns the current backtrace. *)
  val get_backtrace : unit -> Diagnostic.backtrace

  (** [tracef ~loc format ...] record a frame. *)
  val tracef : ?loc:Span.t -> ('a, Format.formatter, unit, (unit -> 'b) -> 'b) format4 -> 'a

  (** [ktracef kont ~loc format ... x] record a frame, running [kont x] to create a thunk that will be run with the new backtrace.
      The call [kont x] itself is run with the current backtrace, and the thunk returned by [kont x] is run with the new backtrace augmented with the frame. *)
  val ktracef : ('a -> unit -> 'b) -> ?loc:Span.t -> ('c, Format.formatter, unit, 'a -> 'b) format4 -> 'c

  (** [retrace bt f] runs the thunk [f] with the backtrace [bt] *)
  val retrace : Diagnostic.backtrace -> (unit -> 'a) -> 'a

  (** {2 Algebraic Effects} *)

  (** [run ~emit ~fatal f] runs the thunk [f], using [emit] to handle non-fatal diagnostics before continuing the computation, and [fatal] to handle fatal diagnostics that have aborted the computation.

      @param init_backtrace The initial backtrace to start with. The default value is the empty backtrace. *)
  val run : ?init_backtrace:Diagnostic.message Span.located Bwd.bwd
    -> emit:(Code.t Diagnostic.t -> unit) -> fatal:(Code.t Diagnostic.t -> 'a) -> (unit -> 'a) -> 'a

  (** [adopt m run f] runs the thunk [f] that uses a different [Logger] instance, with the help of the runner [run] from [Logger], and then uses [m] to map the diagnostics generated by [f] into the ones in the current [Logger] instance. The backtrace within [f] will include the backtrace that leads to [adopt]. The intended use case is to integrate diagnostics from a library into those in the main application.

      This is a convenience function that can be implemented as follows:
      {[
        let adopt m f run =
          run ?init_backtrace:(Some (get_backtrace()))
            ~emit:(fun d -> emit (m d))
            ~fatal:(fun d -> fatal (m d))
            f
      ]}

      Here shows the intended usage, where [Lib] is the library:
      {[
        module MainLogger = Logger.Make(Code)
        module LibLogger = Lib.Logger

        let _ = MainLogger.adopt (Diagnostic.map code_mapper) LibLogger.run @@ fun () -> ...
      ]}
  *)
  val adopt :
    ('code Diagnostic.t -> Code.t Diagnostic.t) ->
    (?init_backtrace:Diagnostic.message Span.located Bwd__BwdDef.bwd ->
     emit:('code Diagnostic.t -> unit) -> fatal:('code Diagnostic.t -> 'a) -> (unit -> 'a) -> 'a) ->
    (unit -> 'a) -> 'a

  (** [try_with ~emit ~fatal f] runs the thunk [f], using [emit] to intercept non-fatal diagnostics before continuing the computation, and [fatal] to intercept fatal diagnostics that have aborted the computation. The default interceptors re-emit or re-raise the intercepted diagnostics. *)
  val try_with : ?emit:(Code.t Diagnostic.t -> unit) -> ?fatal:(Code.t Diagnostic.t -> 'a) -> (unit -> 'a) -> 'a
end
